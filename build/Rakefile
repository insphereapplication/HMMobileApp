require 'erb'
require 'ap'
require 'yaml'

APP_PATH = File.expand_path(File.dirname(__FILE__) + "/..")
RHODES_BRANCH = "2-4-stable"

# icon folder names
PROD_ICON_FOLDER = "Production"
MODEL_UAT_ICON_FOLDER = "UAT-Model"
PROD_UAT_ICON_FOLDER = "UAT-Prod"
INTEG_DEV_ICON_FOLDER = "UAT-IntegDev"

# rhoconfig and build.yml paths
RHO_CONFIG_TEMPLATE_PATH = "#{APP_PATH}/build/rhoconfig.txt.erb"
RHO_CONFIG_PATH = "#{APP_PATH}/rhoconfig.txt"
BUILD_YML_TEMPLATE_PATH = "#{APP_PATH}/build/build.yml.erb"
BUILD_YML_PATH = "#{APP_PATH}/build.yml"

def process_erb(erb_file, output_file, local_binding=binding)
  template = ERB.new(File.read(erb_file))
  File.open(output_file, 'w') {|f| f.write(template.result(local_binding)) }
end

def build_config
  @build_config ||= YAML::load_file("#{APP_PATH}/build.yml")
end

def update_rhodes
  system "cd #{build_config['sdk']} && git reset --hard && git checkout #{RHODES_BRANCH} && git pull origin #{RHODES_BRANCH}"
end

def update_icons(icon_folder)
  puts "Updating icons from #{icon_folder}..."
  raise "Unable to update icons in #{APP_PATH}/icon/#{icon_folder}" unless system "cp #{APP_PATH}/icon/#{icon_folder}/* #{APP_PATH}/icon"
end

def build_yml
  {
    :name => 'Insite',
    :version => '2.1.0',
    :iphone_config => 'release',
    :iphone_sdk => 'iphoneos4.3',
    :codesignidentity => '"iPhone Developer: Dave Sims (8A2526Z579)"',
    :provisionprofile => '57605487-01A2-48E5-93CE-A160E7631951',
    :package_name => 'com.insphere.insite',
    :sdk_path => "/Library/ParivedaInsite/rhodes",
    :sdk_version => "2.3.0",
    :build_type => "release",
    :android_password => "5zW8e3ZuS7DWY0TsnCTyyWnpGSDUqUgj",
    :android_push_send => "insphereapplication@insphereis.com",
    :android_sdk_version => "2.2",
    :android_cert_path => "cert/path",
    :android_push_sender => "push_sender",
    :encrypt_database => '1',
    :bundle_identifier => "com.insphere.insite",
    :bundle_url_scheme => 'insite',
    :extensions => '["json", "another-extension", "fileutils", "mspec", "crypt"]'
  }
end

def model_build_yml
  build_yml.merge({
    :name => "Insite Model"
  })
end

def rhoconfig
  {
    :app_db_version => '3.0',
    :min_severity => '5',
    :max_log_file_size => '1000000',
    :sync_server => 'rhosync.insphereis.net/application',    
    :quick_quote_url => "https://mobile.ipipeline.com/quote/sso/?enc=Zk9jME82eDc4RzVFcHhzc3R2a1ArWGhUWDFHd2czN1JmY1RqSEZVRWFPcUw2ODNLanFlUWIydVVDakI0QmJLbE9jKzhobmUrRloySUpITlA5OHVMc0M3OUJrZTc0cjNpRDVPeG94QStNUnp6OGpoQW5PQzNLejczL2dqVWZBSndiak1rNm1DUHcvL1BjeGZvZW9DQ0ZldXNUUm0vQWF5U0xNRlpXVkJQYXhRPQ==&parameters=gaid=5242",
    :resource_center_url => "https://mobile-rc.insphereis.net/_layouts/InsphereLogin.aspx"
  }
end

def model_rhoconfig
  rhoconfig.merge({
    :sync_server => 'rhosync.model.insphereis.net/application', 
    :quick_quote_url => " https://mobile-uat.ipipeline.com/quote/sso/?enc=Zk9jME82eDc4RzVFcHhzc3R2a1ArWGhUWDFHd2czN1JmY1RqSEZVRWFPcUw2ODNLanFlUWIydVVDakI0QmJLbE9jKzhobmUrRloySUpITlA5OHVMc0M3OUJrZTc0cjNpRDVPeG94QStNUnp6OGpoQW5PQzNLejczL2dqVWZBSndiak1rNm1DUHcvL1BjeGZvZW9DQ0ZldXNUUm0vQWF5U0xNRlpXVkJQYXhRPQ==&parameters=gaid=5242",
    :resource_center_url => "https://mobile-rc.model.insphereis.net/_layouts/InsphereLogin.aspx"
  })
end

# build tasks
namespace :build do
  namespace :update_icons do
    task :prod do 
      update_icons(PROD_ICON_FOLDER)
    end
    
    task :model_uat do
      update_icons(MODEL_UAT_ICON_FOLDER) 
    end
    
    task :prod_uat do 
      update_icons(PROD_UAT_ICON_FOLDER)
    end
    
    task :integ_dev do 
      update_icons(INTEG_DEV_ICON_FOLDER)
    end
  end
  
  task :update_rhodes do 
    puts "Updating #{build_config['sdk']}..."
    raise "Build failed: Could not update Rhodes" unless update_rhodes
    puts "Successfully updated Rhodes..."
  end
  
  task :gen_rhoconfig_prod do 
    puts "Generating rhoconfig.txt for production..."
    @rhoconfig = rhoconfig
    process_erb(RHO_CONFIG_TEMPLATE_PATH, RHO_CONFIG_PATH, binding)
    puts "Successfully generated rhoconfig.txt..."
  end
  
  task :gen_rhoconfig_model do 
    @rhoconfig = model_rhoconfig
    puts "Generating rhoconfig.txt for production..."
    process_erb(RHO_CONFIG_TEMPLATE_PATH, RHO_CONFIG_PATH, binding)
    puts "Successfully generated rhoconfig.txt..."
  end
  
  task :gen_build_yml do 
    puts "Generating build.yml..."
    @build_yml = build_yml
    process_erb(BUILD_YML_TEMPLATE_PATH, BUILD_YML_PATH, binding)
    puts "Successfully generated build.yml..."
  end
  
  task :gen_build_yml_model do 
    puts "Generating build.yml for Model..."
    @build_yml = model_build_yml
    process_erb(BUILD_YML_TEMPLATE_PATH, BUILD_YML_PATH, binding)
    puts "Successfully generated build.yml..."
  end
  
  task :build_clients do
    load "#{APP_PATH}/Rakefile"     
    Rake::Task['device:android:production'].invoke
    Rake::Task['device:iphone:production'].invoke
  end
  
  task :prod => [:gen_rhoconfig_prod, :gen_build_yml, :update_rhodes, 'update_icons:prod', :build_clients] do
  end
  
  task :prod_uat => [:gen_rhoconfig_prod, :gen_build_yml, :update_rhodes, 'update_icons:prod_uat', :build_clients] do
  end 
  
  task :model_uat => [:gen_rhoconfig_model, :gen_build_yml_model, :update_rhodes, 'update_icons:model_uat', :build_clients] do 
  end
  
  task :all => [:prod, :model_uat] do 
  end
end

