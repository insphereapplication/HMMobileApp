require 'erb'
require 'ap'
require 'yaml'
require 'open4'

APP_PATH = File.expand_path(File.dirname(__FILE__) + "/..")
RHODES_BRANCH = "3-4-stable"

# icon folder names
PROD_ICON_FOLDER = "Production"
MODEL_UAT_ICON_FOLDER = "UAT-Model"
PROD_UAT_ICON_FOLDER = "UAT-Prod"
INTEG_DEV_ICON_FOLDER = "UAT-IntegDev"

# rhoconfig and build.yml paths
RHO_CONFIG_TEMPLATE_PATH = "#{APP_PATH}/build/rhoconfig.txt.erb"
RHO_CONFIG_PATH = "#{APP_PATH}/rhoconfig.txt"
BUILD_YML_TEMPLATE_PATH = "#{APP_PATH}/build/build.yml.erb"
BUILD_YML_PATH = "#{APP_PATH}/build.yml"

BUILD_DIR = "#{APP_PATH}/bin/target"
ANDROID_BUILD_DIR = "#{BUILD_DIR}/android"
IOS_BUILD_DIR = "#{BUILD_DIR}/iOS"
SUCCESS = 0

def process_erb(erb_file, output_file, local_binding=binding)
  template = ERB.new(File.read(erb_file))
  File.open(output_file, 'w') {|f| f.write(template.result(local_binding)) }
end

def build_config
  @build_config ||= YAML::load_file("#{APP_PATH}/build.yml")
end

def update_rhodes
  log "Updating #{build_config['sdk']}..."
  system "cd #{build_config['sdk']} && git remote update && git checkout #{RHODES_BRANCH} -f && git reset --hard origin/#{RHODES_BRANCH}"
end

def update_icons(icon_folder)
  log "Updating icons from #{icon_folder}..."
  raise "Unable to update icons in #{APP_PATH}/icon/#{icon_folder}" unless system "cp #{APP_PATH}/icon/#{icon_folder}/* #{APP_PATH}/icon"
end

def log(message)
  puts "*"*80
  puts message
  puts "%"*80
end

# using system commands for client builds instead of rake tasks because for multiple builds, they must run in separate processes (and not share constants, etc.)
def build_device(device)
  log "Building #{device}..." 
  child_pid = fork
  if child_pid.nil?
    exec("cd #{APP_PATH} && rake device:#{device.downcase}:production") 
  else
    Process.wait(child_pid)
    raise "Error occurred during build for #{device}, stopping." unless $?.success?
  end
end

def system_io(call)
  err_text = ""
  exit_status = Open4::popen4(call) do |pid, stdin, stdout, stderr|
    until stdout.eof? 
      puts stdout.gets
    end
    err_text = stderr.read
  end
  raise "ERROR: #{err_text}" unless exit_status == SUCCESS
end

def build_yml
  {
    :name => 'Insite',
    :version => ENV['BUILD_NUMBER'] || '2.1.10',
    :iphone_config => 'Distribution',
    :iphone_sdk => 'iphoneos5.0',
    :codesignidentity => '"iPhone Distribution: Insphere Insurance Solutions, Inc"',
    :provisionprofile => 'CF19D7A1-3F41-40AC-8481-93B89A33B0B1',
    :motorola_license_company => 'Insphere Insurance Solutions',
    :motorola_license => '0209646A081D151A000307711A7E1C75',
    :package_name => 'com.insphere.insite',
    :sdk_path => "/Library/insphereapplication/rhodes",
    :sdk_version => "2.3.0",
    :build_type => "release",
    :android_cert_path => "#{APP_PATH}/insphere_insite.keystore",
    :android_cert_password => "5zW8e3ZuS7DWY0TsnCTyyWnpGSDUqUgj",
    :android_cert_alias => "Insite",
    :android_push_sender => "insphereapplication@insphereis.com",
    :android_sdk_version => "2.2",
    :encrypt_database => '1',
    :bundle_identifier => "com.insphere.insite",
    :bundle_url_scheme => 'insite',
    :extensions => '["json", "another-extension", "fileutils", "mspec", "crypt"]',
    :uri_scheme => 'insite',
    :uri_host => 'insphereis.net'
  }
end

def model_build_yml
  build_yml.merge({
    :codesignidentity => '"iPhone Developer: Dwayne Smith (Q222GR78Z7)"',
    :iphone_config => 'Release',
    :provisionprofile => '14576255-6140-4C91-92E5-FA3F5D4C0D46'
  })
end

def dev_build_yml
  build_yml.merge({
    :codesignidentity => '"iPhone Developer: Dwayne Smith (Q222GR78Z7)"',
    :iphone_config => 'Release',
    :provisionprofile => '14576255-6140-4C91-92E5-FA3F5D4C0D46'
  })
end

def rhoconfig
  {
    :app_db_version => '12.0', #This was last upticked for the drop on 06/11/2013 (spouse delete flag in contact)
    :min_severity => '5',
    :max_log_file_size => '1000000',
    :sync_server => 'https://rhoconnect.insphereis.net/application',    
    :quick_quote_url => "https://mobile.ipipeline.com/quote/sso/?enc=Zk9jME82eDc4RzVFcHhzc3R2a1ArWGhUWDFHd2czN1JmY1RqSEZVRWFPcUw2ODNLanFlUWIydVVDakI0QmJLbE9jKzhobmUrRloySUpITlA5OHVMc0M3OUJrZTc0cjNpRDVPeG94QStNUnp6OGpoQW5PQzNLejczL2dqVWZBSndiak1rNm1DUHcvL1BjeGZvZW9DQ0ZldXNUUm0vQWF5U0xNRlpXVkJQYXhRPQ==&parameters=gaid=5242",
    :resource_center_url => "https://mobile-rc.insphereis.net/_layouts/InsphereLogin.aspx",
    :log_server => 'https://mobileproxy.insphereis.net/clientlog',
    :crm_url => 'https://mobileproxy.insphereis.net',
    :phonecall_duration_default_minutes => '15',
    :insphere_url => 'https://www.insphereis.net'
  }
end

def model_rhoconfig
  rhoconfig.merge({
    :min_severity => '1',
    :max_log_file_size => '2000000',
    :sync_server => 'https://rhoconnect.model.insphereis.net/application', 
    :quick_quote_url => "https://mobile-uat.ipipeline.com/quote/sso/?enc=Zk9jME82eDc4RzVFcHhzc3R2a1ArWGhUWDFHd2czN1JmY1RqSEZVRWFPcUw2ODNLanFlUWIydVVDakI0QmJLbE9jKzhobmUrRloySUpITlA5OHVMc0M3OUJrZTc0cjNpRDVPeG94QStNUnp6OGpoQW5PQzNLejczL2dqVWZBSndiak1rNm1DUHcvL1BjeGZvZW9DQ0ZldXNUUm0vQWF5U0xNRlpXVkJQYXhRPQ==&parameters=gaid=5242",
    :resource_center_url => "https://mobile-rc.model.insphereis.net/_layouts/InsphereLogin.aspx",
    :log_server => 'https://mobileproxy.model.insphereis.net/clientlog',
    :crm_url => 'https://mobileproxy.model.insphereis.net',
    :insphere_url => 'https://www.model.insphereis.net'
  })
end

def dev_rhoconfig
  rhoconfig.merge({
    :min_severity => '1',
    :max_log_file_size => '2000000',
    :sync_server => 'https://rhoconnect.dev.insphereis.net/application', 
    :quick_quote_url => "https://mobile-uat.ipipeline.com/quote/sso/?enc=Zk9jME82eDc4RzVFcHhzc3R2a1ArWGhUWDFHd2czN1JmY1RqSEZVRWFPcUw2ODNLanFlUWIydVVDakI0QmJLbE9jKzhobmUrRloySUpITlA5OHVMc0M3OUJrZTc0cjNpRDVPeG94QStNUnp6OGpoQW5PQzNLejczL2dqVWZBSndiak1rNm1DUHcvL1BjeGZvZW9DQ0ZldXNUUm0vQWF5U0xNRlpXVkJQYXhRPQ==&parameters=gaid=5242",
    :resource_center_url => "https://mobile-rc.dev.insphereis.net/_layouts/InsphereLogin.aspx",
    :log_server => 'https://mobileproxy.dev.net/clientlog',
    :crm_url => 'https://mobileproxy.dev.insphereis.net',
    :insphere_url => 'https://www.dev.insphereis.net'
  })
end

# build tasks
namespace :build do
  namespace :update_icons do
    task :prod do 
      update_icons(PROD_ICON_FOLDER)
    end
    
    task :model_uat do
      update_icons(MODEL_UAT_ICON_FOLDER) 
    end
    
    task :prod_uat do 
      update_icons(PROD_UAT_ICON_FOLDER)
    end
    
    task :integ_dev do 
      update_icons(INTEG_DEV_ICON_FOLDER)
    end
  end
  
  task :update_rhodes do 
    raise "Build failed: Could not update Rhodes" unless update_rhodes
    log "Successfully updated Rhodes..."
  end
  
  task :gen_rhoconfig_prod do 
    log "Generating rhoconfig.txt for Production..."
    @rhoconfig = rhoconfig
    process_erb(RHO_CONFIG_TEMPLATE_PATH, RHO_CONFIG_PATH, binding)
    log "Successfully generated rhoconfig.txt for Production..."
  end
  
  task :gen_rhoconfig_model do 
    @rhoconfig = model_rhoconfig
    log "Generating rhoconfig.txt for Model..."
    process_erb(RHO_CONFIG_TEMPLATE_PATH, RHO_CONFIG_PATH, binding)
    log "Successfully generated rhoconfig.txt for Model..."
  end

  task :gen_rhoconfig_dev do
    @rhoconfig = dev_rhoconfig
    log "Generating rhoconfig.txt for Dev..."
    process_erb(RHO_CONFIG_TEMPLATE_PATH, RHO_CONFIG_PATH, binding)
    log "Successfully generated rhoconfig.txt for Dev..."
  end
  
  task :gen_build_yml do 
    log "Generating build.yml for Production..."
    @build_yml = build_yml
    process_erb(BUILD_YML_TEMPLATE_PATH, BUILD_YML_PATH, binding)
    log "Successfully generated build.yml for Production..."
  end
  
  task :gen_build_yml_model do 
    log "Generating build.yml for Model..."
    @build_yml = model_build_yml
    process_erb(BUILD_YML_TEMPLATE_PATH, BUILD_YML_PATH, binding)
    log "Successfully generated build.yml for Model..."
  end

  task :gen_build_yml_dev do 
    log "Generating build.yml for Dev..."
    @build_yml = dev_build_yml
    process_erb(BUILD_YML_TEMPLATE_PATH, BUILD_YML_PATH, binding)
    log "Successfully generated build.yml for Dev..."
  end
  
  task :build_clients do
    log "Building clients for version: #{build_config['version']}"

    build_device "iPhone"
    log "Done building iPhone..."
    
    build_device "Android"
    log "Done building Android..."
  end
  
  task :copy_model_builds => [:copy_model_iphone_build, :copy_model_android_build] do 
  end

  task :copy_dev_builds => [:copy_dev_iphone_build, :copy_dev_android_build] do 
  end
  
  task :prep_for_model => [:gen_rhoconfig_model, :gen_build_yml_model, :update_rhodes, 'update_icons:model_uat'] do 
  end

  task :prep_for_dev => [:gen_rhoconfig_dev, :gen_build_yml_dev, :update_rhodes, 'update_icons:integ_dev'] do 
  end

  task :prep_for_prod => [:gen_rhoconfig_prod, :gen_build_yml, :update_rhodes, 'update_icons:prod'] do 
  end
  
  task :copy_model_iphone_build do
    ios_target_dir = "#{IOS_BUILD_DIR}/#{build_config['iphone']['sdk']}"
    log "Copying iphone model build to model dir: #{ios_target_dir}/model"  
    Dir.mkdir "#{ios_target_dir}/model" unless File.exists?("#{ios_target_dir}/model")
    raise "Unable to copy model iphone build" unless system "cp -r #{ios_target_dir}/release/* #{ios_target_dir}/model"
    log "iphone model build copied to model dir"
  end
  
  task :copy_model_android_build do
    android_target_dir = "#{ANDROID_BUILD_DIR}"
    log "Copying android model build to model dir: #{android_target_dir}/model"  
    Dir.mkdir "#{android_target_dir}/model" unless File.exists?("#{android_target_dir}/model")
    raise "Unable to copy model android build" unless system "cp #{android_target_dir}/*.apk #{android_target_dir}/model"
    log "android model build copied to model dir"
  end

  task :copy_dev_iphone_build do
    ios_target_dir = "#{IOS_BUILD_DIR}/#{build_config['iphone']['sdk']}"
    log "Copying iphone dev build to dev dir: #{ios_target_dir}/dev"  
    Dir.mkdir "#{ios_target_dir}/dev" unless File.exists?("#{ios_target_dir}/dev")
    raise "Unable to copy dev iphone build" unless system "cp -r #{ios_target_dir}/release/* #{ios_target_dir}/dev"
    log "iphone dev build copied to dev dir"
  end
    
  task :copy_dev_android_build do
    android_target_dir = "#{ANDROID_BUILD_DIR}"
    log "Copying android dev build to dev dir: #{android_target_dir}/dev"  
    Dir.mkdir "#{android_target_dir}/dev" unless File.exists?("#{android_target_dir}/dev")
    raise "Unable to copy dev android build" unless system "cp #{android_target_dir}/*.apk #{android_target_dir}/dev"
    log "android dev build copied to dev dir"
  end
  
  task :prod => [:prep_for_prod] do
    Rake::Task["build:build_clients"].execute
  end
  
  task :model_uat => [:prep_for_model] do
    Rake::Task["build:build_clients"].execute 
    Rake::Task["build:copy_model_builds"].invoke
  end

  task :dev => [:prep_for_dev] do
    Rake::Task["build:build_clients"].execute 
    Rake::Task["build:copy_dev_builds"].invoke
  end
  
  task :iphone_model => [:prep_for_model] do
    build_device "iPhone"
  end
  
  task :android_model => [:prep_for_model] do
    build_device "Android"
  end

  task :iphone_dev => [:prep_for_dev] do
    build_device "iPhone"
  end
    
  task :android_dev => [:prep_for_dev] do
    build_device "Android"
  end
  
  task :iphone => [:prep_for_prod] do 
    build_device "iPhone"
  end
  
  task :android => [:prep_for_prod] do
    build_device "Android"
  end
  
  task :clean do
    `rm -rf #{BUILD_DIR}`
  end
  
  # always build model first, so you don't overwrite the prod build for iphone
  task :all =>  [:clean, :dev, :model_uat, :prod] do 
  end
end
